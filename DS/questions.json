[
    {
        "category": "Array",
        "question": "What is the time complexity of accessing an element at a specific index in a Java array?",
        "options": [
            "O(n)",
            "O(log n)",
            "O(1)",
            "O(n log n)"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Array",
        "question": "Which method is typically used to get the number of elements in a Java array?",
        "options": [
            ".size()",
            ".length()",
            ".count()",
            ".getSize()"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "Array",
        "question": "What happens when you try to access an element at an index that is out of bounds in a Java array?",
        "options": [
            "It returns null",
            "It returns 0",
            "It throws an ArrayIndexOutOfBoundsException",
            "It resizes the array automatically"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Set",
        "question": "Which Java interface guarantees that all elements in the collection are unique?",
        "options": [
            "List",
            "Queue",
            "Set",
            "Map"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Set",
        "question": "Which `Set` implementation in Java provides elements in no particular order and offers constant-time performance for basic operations?",
        "options": [
            "TreeSet",
            "LinkedHashSet",
            "HashSet",
            "SortedSet"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Set",
        "question": "What is the time complexity of checking if an element exists in a `HashSet` on average?",
        "options": [
            "O(n)",
            "O(log n)",
            "O(1)",
            "O(n log n)"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Queue",
        "question": "Which Java interface represents a collection designed for holding elements prior to processing, following a First-In, First-Out (FIFO) principle?",
        "options": [
            "List",
            "Set",
            "Queue",
            "Stack"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Queue",
        "question": "Which method is typically used to add an element to the end of a `Queue` in Java?",
        "options": [
            ".add()",
            ".push()",
            ".offer()",
            ".enqueue()"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Queue",
        "question": "Which method is typically used to remove and return the element at the front of a `Queue` in Java?",
        "options": [
            ".remove()",
            ".pop()",
            ".poll()",
            ".dequeue()"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "PriorityQueue",
        "question": "What is the primary characteristic of a `PriorityQueue` in Java?",
        "options": [
            "It maintains elements in the order they were added",
            "It maintains elements in reverse order of their addition",
            "It orders elements based on their natural ordering or a specified comparator",
            "It does not maintain any specific order"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "PriorityQueue",
        "question": "Which method is used to add an element to a `PriorityQueue` in Java?",
        "options": [
            ".add()",
            ".push()",
            ".offer()",
            ".insert()"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "PriorityQueue",
        "question": "What is the time complexity of adding an element to a `PriorityQueue` in Java?",
        "options": [
            "O(1)",
            "O(n)",
            "O(log n)",
            "O(n log n)"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "LinkedList",
        "question": "Which Java class implements the `List` and `Deque` interfaces, providing constant-time insertion and deletion at both ends?",
        "options": [
            "ArrayList",
            "HashSet",
            "LinkedList",
            "Vector"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "LinkedList",
        "question": "Which method is used to add an element to the beginning of a `LinkedList` in Java?",
        "options": [
            ".addFirst()",
            ".push()",
            ".offerFirst()",
            ".addToFront()"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "LinkedList",
        "question": "What is the time complexity of accessing an element at a specific index in a `LinkedList` in the worst case?",
        "options": [
            "O(1)",
            "O(log n)",
            "O(n)",
            "O(n log n)"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Stack",
        "question": "Which Java class represents a last-in-first-out (LIFO) stack of objects?",
        "options": [
            "Queue",
            "ArrayList",
            "Stack",
            "LinkedList"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Stack",
        "question": "Which method is used to add an element to the top of a `Stack` in Java?",
        "options": [
            ".add()",
            ".push()",
            ".offer()",
            ".insert()"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "Stack",
        "question": "Which method is used to remove and return the element at the top of a `Stack` in Java?",
        "options": [
            ".remove()",
            ".pop()",
            ".poll()",
            ".getTop()"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "HashMap",
        "question": "Which Java class implements the `Map` interface and stores key-value pairs, allowing null keys and null values?",
        "options": [
            "TreeMap",
            "Hashtable",
            "HashMap",
            "LinkedHashMap"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "HashMap",
        "question": "Which method is used to add a key-value pair to a `HashMap` in Java?",
        "options": [
            ".add()",
            ".put()",
            ".insert()",
            ".store()"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "HashMap",
        "question": "What is the average time complexity of retrieving a value based on its key in a `HashMap`?",
        "options": [
            "O(n)",
            "O(log n)",
            "O(1)",
            "O(n log n)"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "TreeMap",
        "question": "Which Java class implements the `SortedMap` interface, storing key-value pairs in a sorted order of keys?",
        "options": [
            "HashMap",
            "Hashtable",
            "TreeMap",
            "LinkedHashMap"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "TreeMap",
        "question": "What is the time complexity of adding a key-value pair to a `TreeMap`?",
        "options": [
            "O(1)",
            "O(n)",
            "O(log n)",
            "O(n log n)"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "TreeMap",
        "question": "Which method in `TreeMap` is used to retrieve and remove the first (lowest) key currently in the map?",
        "options": [
            ".getFirstKey()",
            ".pollFirstKey()",
            ".removeFirst()",
            ".lowestKey()"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "HashSet",
        "question": "Which Java class implements the `Set` interface using a hash table?",
        "options": [
            "TreeSet",
            "LinkedHashSet",
            "HashSet",
            "SortedSet"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "HashSet",
        "question": "Does `HashSet` allow duplicate elements?",
        "options": [
            "Yes",
            "No"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "HashSet",
        "question": "Does `HashSet` maintain the insertion order of elements?",
        "options": [
            "Yes",
            "No"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "LinkedHashSet",
        "question": "Which Java class implements the `Set` interface using a hash table and a linked list to maintain the insertion order of elements?",
        "options": [
            "HashSet",
            "TreeSet",
            "LinkedHashSet",
            "SortedSet"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "LinkedHashSet",
        "question": "Does `LinkedHashSet` allow duplicate elements?",
        "options": [
            "Yes",
            "No"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "LinkedHashSet",
        "question": "Does `LinkedHashSet` maintain the insertion order of elements?",
        "options": [
            "Yes",
            "No"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "TreeSet",
        "question": "Which Java class implements the `SortedSet` interface using a self-balancing binary search tree (like a Red-Black Tree)?",
        "options": [
            "HashSet",
            "LinkedHashSet",
            "TreeSet",
            "PriorityQueue"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "TreeSet",
        "question": "Does `TreeSet` allow duplicate elements?",
        "options": [
            "Yes",
            "No"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "TreeSet",
        "question": "In what order does `TreeSet` typically store its elements?",
        "options": [
            "Insertion order",
            "Reverse of insertion order",
            "Natural ordering or based on a provided Comparator",
            "Random order"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Hashtable",
        "question": "Which Java class, similar to HashMap, is synchronized and does not allow null keys or null values?",
        "options": [
            "TreeMap",
            "Hashtable",
            "ConcurrentHashMap",
            "LinkedHashMap"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "Hashtable",
        "question": "Is `Hashtable` generally preferred over `HashMap` in modern multithreaded Java applications?",
        "options": [
            "Yes",
            "No, `ConcurrentHashMap` is generally preferred",
            "They are equally preferred",
            "It depends on the specific use case, with no general preference"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "Hashtable",
        "question": "What happens if you try to insert a null key into a `Hashtable`?",
        "options": [
            "It inserts the null key without any issue",
            "It throws a NullPointerException",
            "It ignores the insertion",
            "It might lead to unpredictable behavior"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "Vector",
        "question": "Which Java class is a dynamic array, similar to `ArrayList`, but is synchronized?",
        "options": [
            "LinkedList",
            "HashSet",
            "Vector",
            "Stack"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Vector",
        "question": "What is a potential performance drawback of using `Vector` in a single-threaded environment compared to `ArrayList`?",
        "options": [
            "`Vector` has faster element access",
            "`Vector`'s synchronization can introduce overhead",
            "`ArrayList` cannot grow dynamically",
            "`Vector` consumes less memory"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "Vector",
        "question": "Which method is used to add an element to the end of a `Vector`?",
        "options": [
            ".add()",
            ".push()",
            ".append()",
            ".addElement()"
        ],
        "correctAnswerIndex": 3
    },
    {
        "category": "ArrayList",
        "question": "Which Java class implements the `List` interface using a resizable array?",
        "options": [
            "LinkedList",
            "HashSet",
            "ArrayList",
            "Vector"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "ArrayList",
        "question": "What is the average time complexity of adding an element to the end of an `ArrayList`?",
        "options": [
            "O(n)",
            "O(log n)",
            "O(1)",
            "O(n log n)"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "ArrayList",
        "question": "What happens when an `ArrayList` reaches its capacity and you try to add more elements?",
        "options": [
            "It throws an exception",
            "It silently discards the new elements",
            "It automatically increases its capacity",
            "It returns an error code"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Deque",
        "question": "Which Java interface represents a double-ended queue, allowing insertion and deletion at both ends?",
        "options": [
            "Queue",
            "List",
            "Deque",
            "Set"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Deque",
        "question": "Which method is used to add an element to the front of a `Deque` in Java?",
        "options": [
            ".addFirst()",
            ".push()",
            ".offerFirst()",
            ".addToFront()"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "Deque",
        "question": "Which data structures in Java can be used to implement the `Deque` interface?",
        "options": [
            "ArrayList and HashSet",
            "LinkedList and ArrayDeque",
            "HashSet and TreeSet",
            "PriorityQueue and Stack"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "Map",
        "question": "Which Java interface represents a collection that maps keys to values?",
        "options": [
            "List",
            "Set",
            "Queue",
            "Map"
        ],
        "correctAnswerIndex": 3
    },
    {
        "category": "Map",
        "question": "What is the general term for the operation of finding a value associated with a given key in a `Map`?",
        "options": [
            "Insertion",
            "Deletion",
            "Lookup",
            "Traversal"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "Map",
        "question": "Which of the following is NOT a direct implementation of the `Map` interface in the standard Java library?",
        "options": [
            "HashMap",
            "TreeMap",
            "HashSet",
            "LinkedHashMap"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "String",
        "question": "Which Java method is used to find the length of a String?",
        "options": [
            ".size()",
            ".length()",
            ".count()",
            ".getSize()"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "String",
        "question": "Which Java method returns the character at a specified index in a String?",
        "options": [
            ".getChar()",
            ".charAt()",
            ".characterAt()",
            ".indexAt()"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "String",
        "question": "What is the index of the first character in a Java String?",
        "options": [
            "0",
            "1",
            "-1",
            "Depends on the String"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "String",
        "question": "Which Java method is used to concatenate (join) two or more Strings?",
        "options": [
            ".join()",
            ".merge()",
            ".concat()",
            ".plus()"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "String",
        "question": "Which of the following is the correct way to compare two Strings for equality in Java?",
        "options": [
            "string1 == string2",
            "string1.equals(string2)",
            "string1.compare(string2)",
            "string1.isEqualTo(string2)"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "String",
        "question": "What does the `compareTo()` method of the String class return if the String is lexicographically greater than the other String?",
        "options": [
            "0",
            "A negative value",
            "A positive value",
            "true"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "String",
        "question": "Which Java method extracts a substring from a String?",
        "options": [
            ".slice()",
            ".sub()",
            ".substring()",
            ".extract()"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "String",
        "question": "Which `substring()` method signature is used to extract a substring starting from a specified index to the end of the String?",
        "options": [
            ".substring(startIndex, endIndex)",
            ".substring(startIndex)",
            ".substring(endIndex)",
            ".sub(startIndex)"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "String",
        "question": "Which Java method converts all the characters in a String to lowercase?",
        "options": [
            ".toLowerCase()",
            ".lowerCase()",
            ".convertToLowerCase()",
            ".makeLower()"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "String",
        "question": "Which Java method converts all the characters in a String to uppercase?",
        "options": [
            ".toUpperCase()",
            ".upperCase()",
            ".convertToUpperCase()",
            ".makeUpper()"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "String",
        "question": "Which Java method removes leading and trailing whitespace from a String?",
        "options": [
            ".trim()",
            ".strip()",
            ".removeWhitespace()",
            ".clean()"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "String",
        "question": "Which Java method checks if a String starts with a specified prefix?",
        "options": [
            ".startsWith()",
            ".hasPrefix()",
            ".beginWith()",
            ".prefixIs()"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "String",
        "question": "Which Java method checks if a String ends with a specified suffix?",
        "options": [
            ".endsWith()",
            ".hasSuffix()",
            ".finishWith()",
            ".suffixIs()"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "String",
        "question": "Which Java method returns the index of the first occurrence of a specified substring within a String?",
        "options": [
            ".indexOf()",
            ".search()",
            ".find()",
            ".getPosition()"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "String",
        "question": "What does the `indexOf()` method return if the specified substring is not found in the String?",
        "options": [
            "-1",
            "0",
            "null",
            "An exception is thrown"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "String",
        "question": "Which Java method replaces all occurrences of a specified character with another character?",
        "options": [
            ".replace()",
            ".replaceAll()",
            ".change()",
            ".substitute()"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "String",
        "question": "Which Java method splits a String into an array of substrings based on a given delimiter?",
        "options": [
            ".divide()",
            ".break()",
            ".split()",
            ".segment()"
        ],
        "correctAnswerIndex": 2
    },
    {
        "category": "String",
        "question": "Which Java method checks if a String is empty (has a length of zero)?",
        "options": [
            ".isEmpty()",
            ".isNull()",
            ".lengthEqualsZero()",
            ".isBlank()"
        ],
        "correctAnswerIndex": 0
    },
    {
        "category": "String",
        "question": "Which Java method returns a new String that is a result of replacing a sequence of character matching a regular expression with a replacement String?",
        "options": [
            ".replace()",
            ".replaceAll()",
            ".replaceFirst()",
            ".substituteAll()"
        ],
        "correctAnswerIndex": 1
    },
    {
        "category": "String",
        "question": "Which Java method returns a new String resulting from replacing the first occurrence of a substring that matches the regex with the replacement String?",
        "options": [
            ".replace()",
            ".replaceAll()",
            ".replaceFirst()",
            ".substituteFirst()"
        ],
        "correctAnswerIndex": 2
    }
]